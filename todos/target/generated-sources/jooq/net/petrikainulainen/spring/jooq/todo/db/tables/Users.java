/**
 * This class is generated by jOOQ
 */
package net.petrikainulainen.spring.jooq.todo.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.petrikainulainen.spring.jooq.todo.db.Keys;
import net.petrikainulainen.spring.jooq.todo.db.Public;
import net.petrikainulainen.spring.jooq.todo.db.tables.records.UsersRecord;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

	private static final long serialVersionUID = 26226636;

	/**
	 * The reference instance of <code>public.users</code>
	 */
	public static final Users USERS = new Users();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UsersRecord> getRecordType() {
		return UsersRecord.class;
	}

	/**
	 * The column <code>public.users.userid</code>.
	 */
	public final TableField<UsersRecord, String> USERID = createField("userid", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>public.users.password</code>.
	 */
	public final TableField<UsersRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>public.users.groups</code>.
	 */
	public final TableField<UsersRecord, String[]> GROUPS = createField("groups", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

	/**
	 * The column <code>public.users.fullname</code>.
	 */
	public final TableField<UsersRecord, String> FULLNAME = createField("fullname", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>public.users.avatar</code>.
	 */
	public final TableField<UsersRecord, String> AVATAR = createField("avatar", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>public.users.email</code>.
	 */
	public final TableField<UsersRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>public.users.created</code>.
	 */
	public final TableField<UsersRecord, Long> CREATED = createField("created", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>public.users.validated</code>.
	 */
	public final TableField<UsersRecord, Boolean> VALIDATED = createField("validated", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * The column <code>public.users.validationcode</code>.
	 */
	public final TableField<UsersRecord, String> VALIDATIONCODE = createField("validationcode", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

	/**
	 * The column <code>public.users.category</code>.
	 */
	public final TableField<UsersRecord, Integer> CATEGORY = createField("category", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.users.details</code>.
	 */
	public final TableField<UsersRecord, String> DETAILS = createField("details", org.jooq.impl.SQLDataType.VARCHAR.length(2048), this, "");

	/**
	 * The column <code>public.users.status</code>.
	 */
	public final TableField<UsersRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.defaulted(true), this, "");

	/**
	 * Create a <code>public.users</code> table reference
	 */
	public Users() {
		this("users", null);
	}

	/**
	 * Create an aliased <code>public.users</code> table reference
	 */
	public Users(String alias) {
		this(alias, USERS);
	}

	private Users(String alias, Table<UsersRecord> aliased) {
		this(alias, aliased, null);
	}

	private Users(String alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UsersRecord> getPrimaryKey() {
		return Keys.USERS_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UsersRecord>> getKeys() {
		return Arrays.<UniqueKey<UsersRecord>>asList(Keys.USERS_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Users as(String alias) {
		return new Users(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Users rename(String name) {
		return new Users(name, null);
	}
}

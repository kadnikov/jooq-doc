/**
 * This class is generated by jOOQ
 */
package ru.doccloud.document.jooq.db.tables;


import com.fasterxml.jackson.databind.JsonNode;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.doccloud.common.jooq.PostgresJSONJacksonJsonNodeBinding;
import ru.doccloud.document.jooq.db.Keys;
import ru.doccloud.document.jooq.db.Public;
import ru.doccloud.document.jooq.db.tables.records.SystemRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class System extends TableImpl<SystemRecord> {

	private static final long serialVersionUID = -177143267;

	/**
	 * The reference instance of <code>public.system</code>
	 */
	public static final System SYSTEM = new System();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SystemRecord> getRecordType() {
		return SystemRecord.class;
	}

	/**
	 * The column <code>public.system.id</code>.
	 */
	public final TableField<SystemRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.system.sys_date_cr</code>.
	 */
	public final TableField<SystemRecord, Timestamp> SYS_DATE_CR = createField("sys_date_cr", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.system.sys_desc</code>.
	 */
	public final TableField<SystemRecord, String> SYS_DESC = createField("sys_desc", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_date_mod</code>.
	 */
	public final TableField<SystemRecord, Timestamp> SYS_DATE_MOD = createField("sys_date_mod", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.system.sys_title</code>.
	 */
	public final TableField<SystemRecord, String> SYS_TITLE = createField("sys_title", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_author</code>.
	 */
	public final TableField<SystemRecord, String> SYS_AUTHOR = createField("sys_author", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_modifier</code>.
	 */
	public final TableField<SystemRecord, String> SYS_MODIFIER = createField("sys_modifier", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_readers</code>.
	 */
	public final TableField<SystemRecord, String[]> SYS_READERS = createField("sys_readers", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

	/**
	 * The column <code>public.system.sys_editors</code>.
	 */
	public final TableField<SystemRecord, String[]> SYS_EDITORS = createField("sys_editors", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

	/**
	 * The column <code>public.system.sys_folders</code>.
	 */
	public final TableField<SystemRecord, String[]> SYS_FOLDERS = createField("sys_folders", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

	/**
	 * The column <code>public.system.sys_type</code>.
	 */
	public final TableField<SystemRecord, String> SYS_TYPE = createField("sys_type", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_version</code>.
	 */
	public final TableField<SystemRecord, String> SYS_VERSION = createField("sys_version", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_parent</code>.
	 */
	public final TableField<SystemRecord, String> SYS_PARENT = createField("sys_parent", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_file_path</code>.
	 */
	public final TableField<SystemRecord, String> SYS_FILE_PATH = createField("sys_file_path", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_file_mime_type</code>.
	 */
	public final TableField<SystemRecord, String> SYS_FILE_MIME_TYPE = createField("sys_file_mime_type", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_file_length</code>.
	 */
	public final TableField<SystemRecord, Long> SYS_FILE_LENGTH = createField("sys_file_length", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>public.system.data</code>.
	 */
	public final TableField<SystemRecord, JsonNode> DATA = createField("data", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "", new PostgresJSONJacksonJsonNodeBinding());

	/**
	 * The column <code>public.system.sys_file_name</code>.
	 */
	public final TableField<SystemRecord, String> SYS_FILE_NAME = createField("sys_file_name", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.system.sys_uuid</code>.
	 */
	public final TableField<SystemRecord, UUID> SYS_UUID = createField("sys_uuid", org.jooq.impl.SQLDataType.UUID.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.system.sys_symbolic_name</code>.
	 */
	public final TableField<SystemRecord, String> SYS_SYMBOLIC_NAME = createField("sys_symbolic_name", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * Create a <code>public.system</code> table reference
	 */
	public System() {
		this("system", null);
	}

	/**
	 * Create an aliased <code>public.system</code> table reference
	 */
	public System(String alias) {
		this(alias, SYSTEM);
	}

	private System(String alias, Table<SystemRecord> aliased) {
		this(alias, aliased, null);
	}

	private System(String alias, Table<SystemRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SystemRecord, Integer> getIdentity() {
		return Keys.IDENTITY_SYSTEM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SystemRecord> getPrimaryKey() {
		return Keys.SYSTEM_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SystemRecord>> getKeys() {
		return Arrays.<UniqueKey<SystemRecord>>asList(Keys.SYSTEM_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public System as(String alias) {
		return new System(alias, this);
	}

	/**
	 * Rename this table
	 */
	public System rename(String name) {
		return new System(name, null);
	}
}

"use strict";var App=angular.module("app",["ngLocale","ngCookies","ngResource","ngSanitize","pascalprecht.translate","ui.bootstrap","ui.router","ui.utils","angular-growl","angularMoment","angularUtils.directives.dirPagination","app.partials","app.common.config","app.common.directives","app.common.services","app.search.services","app.todo.controllers","app.todo.services"]);angular.module("app.common.config",[]).config(["$urlRouterProvider","$locationProvider",function($urlRouterProvider,$locationProvider){$urlRouterProvider.otherwise("/"),$locationProvider.html5Mode(!1)}]).config(["$translateProvider",function($translateProvider){$translateProvider.useStaticFilesLoader({prefix:"/jooq/frontend/i18n/",suffix:".json"}),$translateProvider.preferredLanguage("en"),$translateProvider.useLocalStorage(),$translateProvider.useMissingTranslationHandlerLog()}]).config(["growlProvider",function(growlProvider){growlProvider.globalTimeToLive(5e3)}]),angular.module("app.common.directives",[]).directive("staticInclude",["$http","$templateCache","$compile",function($http,$templateCache,$compile){return function(scope,element,attrs){var templatePath=attrs.staticInclude;$http.get(templatePath,{cache:$templateCache}).success(function(response){var contents=$("<div/>").html(response).contents();element.html(contents),$compile(contents)(scope)})}}]),angular.module("app.common.services",[]).service("NotificationService",["$rootScope","growl",function($rootScope,growl){function displayNotification(message,type){"success"===type?growl.addSuccessMessage(message):"warn"===type?growl.addWarnMessage(message):"info"===type?growl.addInfoMessage(message):growl.addErrorMessage(message)}var flashMessageQueue=[];return $rootScope.$on("$stateChangeSuccess",function(){for(;flashMessageQueue.length>0;){var item=flashMessageQueue.shift();item&&displayNotification(item.message,item.type)}}),{flashMessage:function(message,type){flashMessageQueue.push({message:message,type:type||"info"})}}}]),angular.module("app.search.services",["ngResource"]).factory("Search",["$resource",function($resource){var api=$resource("/api/todo/search",{},{query:{method:"GET",isArray:!1}});return{findBySearchTerm:function(searchTerm,pageNumber,pageSize){return api.query({page:pageNumber,searchTerm:searchTerm,size:pageSize,sort:"ID,DESC"}).$promise}}}]),angular.module("app.todo.controllers",[]).constant("paginationConfig",{pageSize:5}).config(["$stateProvider",function($stateProvider){$stateProvider.state("todo",{url:"/","abstract":!0,template:"<ui-view/>"}).state("todo.index",{url:"",controller:"TodoListController",templateUrl:"frontend/partials/todo/todo-list.html",resolve:{todos:["Todos",function(Todos){return Todos.query()}]}}).state("todo.add",{url:"todo/add",controller:"AddTodoController",templateUrl:"frontend/partials/todo/add-todo.html"}).state("todo.edit",{url:"todo/:todoId/edit",controller:"EditTodoController",templateUrl:"frontend/partials/todo/edit-todo.html",resolve:{updatedTodo:["Todos","$stateParams",function(Todos,$stateParams){return $stateParams.todoId?Todos.get($stateParams.todoId):null}]}}).state("todo.search",{url:"todo/search/:searchTerm/page/:pageNumber/size/:pageSize",controller:"SearchResultController",templateUrl:"frontend/partials/search/search-results.html",resolve:{searchTerm:["$stateParams",function($stateParams){return $stateParams.searchTerm}],searchResults:["Search","$stateParams",function(Search,$stateParams){return $stateParams.searchTerm?Search.findBySearchTerm($stateParams.searchTerm,$stateParams.pageNumber-1,$stateParams.pageSize):null}]}}).state("todo.view",{url:"todo/:todoId",controller:"ViewTodoController",templateUrl:"frontend/partials/todo/view-todo.html",resolve:{viewedTodo:["Todos","$stateParams",function(Todos,$stateParams){return $stateParams.todoId?Todos.get($stateParams.todoId):null}]}})}]).controller("TodoListController",["$scope","$state","todos",function($scope,$state,todos){console.log("Rendering todo entry list page."),$scope.todos=todos,$scope.addTodo=function(){$state.go("todo.add")}}]).controller("AddTodoController",["$scope","$state","Todos",function($scope,$state,Todos){console.log("Rendering add todo entry page."),$scope.todo={},$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(added){$state.go("todo.view",{todoId:added.id},{reload:!0,inherit:!0,notify:!0})};Todos.save($scope.todo,onSuccess)}}}]).controller("DeleteTodoController",["$scope","$modalInstance","$state","Todos","deletedTodo",function($scope,$modalInstance,$state,Todos,deletedTodo){$scope.todo=deletedTodo,$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.delete=function(){var onSuccess=function(){$modalInstance.close(),$state.go("todo.index",{},{reload:!0,inherit:!0,notify:!0})};Todos.delete($scope.todo,onSuccess)}}]).controller("EditTodoController",["$scope","$state","updatedTodo","Todos",function($scope,$state,updatedTodo,Todos){console.log(updatedTodo),$scope.todo=updatedTodo,$scope.saveTodo=function(){if($scope.todoForm.$valid){var onSuccess=function(updated){$state.go("todo.view",{todoId:updated.id},{reload:!0,inherit:!0,notify:!0})};Todos.update($scope.todo,onSuccess)}}}]).controller("SearchController",["$scope","$state","paginationConfig",function($scope,$state,paginationConfig){var userWritingSearchTerm=!1,minimumSearchTermLength=3;$scope.missingChars=minimumSearchTermLength,$scope.searchTerm="",$scope.searchFieldBlur=function(){userWritingSearchTerm=!1},$scope.searchFieldFocus=function(){userWritingSearchTerm=!0},$scope.showMissingCharacterText=function(){return userWritingSearchTerm&&$scope.searchTerm.length<minimumSearchTermLength?!0:!1},$scope.search=function(){$scope.searchTerm.length<minimumSearchTermLength?$scope.missingChars=minimumSearchTermLength-$scope.searchTerm.length:($scope.missingChars=0,$state.go("todo.search",{searchTerm:$scope.searchTerm,pageNumber:1,pageSize:paginationConfig.pageSize},{reload:!0,inherit:!0,notify:!0}))}}]).controller("SearchResultController",["$scope","$state","paginationConfig","searchTerm","searchResults",function($scope,$state,paginationConfig,searchTerm,searchResults){console.log("Rendering search results page."),$scope.todos=searchResults.content,$scope.pagination={currentPage:searchResults.number+1,itemsPerPage:paginationConfig.pageSize,totalItems:searchResults.totalElements},$scope.pageChanged=function(newPageNumber){$state.go("todo.search",{searchTerm:searchTerm,pageNumber:newPageNumber,pageSize:paginationConfig.pageSize},{reload:!0,inherit:!0,notify:!0})}}]).controller("ViewTodoController",["$scope","$state","$modal","viewedTodo",function($scope,$state,$modal,viewedTodo){console.log("Rendering view todo entry page."),$scope.todo=viewedTodo,$scope.showEditPage=function(){$state.go("todo.edit",{todoId:$scope.todo.id},{reload:!0,inherit:!0,notify:!0})},$scope.showDeleteDialog=function(){$modal.open({templateUrl:"frontend/partials/todo/delete-todo-modal.html",controller:"DeleteTodoController",resolve:{deletedTodo:function(){return $scope.todo}}})}}]),angular.module("app.todo.services",["ngResource"]).factory("Todos",["$resource","NotificationService",function($resource,NotificationService){var api=$resource("/api/todo/:id",{id:"@id"},{query:{method:"GET",params:{},isArray:!0},get:{method:"GET"},save:{method:"POST"},update:{method:"PUT"}});return{"delete":function(todo,successCallback){return api.delete(todo,function(){NotificationService.flashMessage("todo.notifications.delete.success","success"),successCallback()})},query:function(){return api.query()},get:function(todoId){return api.get({id:todoId}).$promise},save:function(todo,successCallback){api.save(todo,function(added){NotificationService.flashMessage("todo.notifications.add.success","success"),successCallback(added)})},update:function(todo,successCallback){api.update(todo,function(updated){NotificationService.flashMessage("todo.notifications.update.success","success"),successCallback(updated)})}}}]),angular.module("demo",["blueimp.fileupload"]).config(["$httpProvider","fileUploadProvider",function($httpProvider,fileUploadProvider){delete $httpProvider.defaults.headers.common["X-Requested-With"],fileUploadProvider.defaults.redirect=window.location.href.replace(/\/[^\/]*$/,"/cors/result.html?%s")}]).controller("DemoFileUploadController",["$scope","$http","$filter","$window",function($scope){$scope.options={url:url}}]).controller("FileDestroyController",["$scope","$http",function($scope,$http){var state,file=$scope.file;file.url?(file.$state=function(){return state},file.$destroy=function(){return state="pending",$http({url:file.deleteUrl,method:file.deleteType}).then(function(){state="resolved",$scope.clear(file)},function(){state="rejected"})}):file.$cancel||file._index||(file.$cancel=function(){$scope.clear(file)})}]);
//# sourceMappingURL=data:application/json;base64,